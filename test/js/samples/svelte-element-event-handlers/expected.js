/* generated by Atletik vX.Y.Z */
import {
	AtletikComponent,
	append,
	bubble,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_dynamic_element_data
} from "Atletik/internal";

function create_dynamic_element(ctx) {
	let Atletik_element1;
	let Atletik_element0;
	let mounted;
	let dispose;

	return {
		c() {
			Atletik_element1 = element(a);
			Atletik_element0 = element(span);
			set_dynamic_element_data(span)(Atletik_element0, { class: "inner" });
			set_dynamic_element_data(a)(Atletik_element1, { class: "outer" });
		},
		m(target, anchor) {
			insert(target, Atletik_element1, anchor);
			append(Atletik_element1, Atletik_element0);

			if (!mounted) {
				dispose = [
					listen(Atletik_element0, "keydown", /*keydown_handler_1*/ ctx[2]),
					listen(Atletik_element0, "keyup", /*keyup_handler_1*/ ctx[3]),
					listen(Atletik_element1, "keydown", /*keydown_handler*/ ctx[0]),
					listen(Atletik_element1, "keyup", /*keyup_handler*/ ctx[1])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(Atletik_element1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let Atletik_element = a && create_dynamic_element(ctx);

	return {
		c() {
			if (Atletik_element) Atletik_element.c();
		},
		m(target, anchor) {
			if (Atletik_element) Atletik_element.m(target, anchor);
		},
		p(ctx, [dirty]) {
			if (a) {
				Atletik_element.p(ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (Atletik_element) Atletik_element.d(detaching);
		}
	};
}

const a = 'a';
const span = 'span';

function instance($$self) {
	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	return [keydown_handler, keyup_handler, keydown_handler_1, keyup_handler_1];
}

class Component extends AtletikComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;